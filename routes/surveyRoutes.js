const _ = require('lodash');
const { Path } = require('path-parser');
const { URL } = require('url')
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

//Model class to create an instance of a survey
const Survey = mongoose.model('surveys');

//Arguments mut be in the proper order to run properly
module.exports = app => {
    //Fetches all user surveys from database
    app.get('/api/surveys', requireLogin, async (req, res) => {
        const surveys = await Survey.find({ _user: req.user.id })
            .select({ recipients: false });

        res.send(surveys);
    });

    app.get('/api/surveys/:surveyId/:choice', (req, res) => {
        res.send('Thanks for voting!'); 
    });

    //Webhooks route handler
    app.post('/api/surveys/webhooks', (req, res) => {
        //Takes full url and extract off just the route we need - Matcher that extracts survey id and choice
        const p = new Path('/api/surveys/:surveyId/:choice');
        
        _.chain(req.body)
            .map(({ email, url}) => {
                const match = p.test(new URL(url).pathname);
                if (match) {
                    return { email, surveyId: match.surveyId, choice: match.choice }
                }
            })
            .compact()
            //Goes through the events and makes sure we never have any duplicate ids
            .uniqBy('email', 'surveyId')
            //Mongoose query logic to handle whether user clicked yes or no and update accordingly
            .each(({ surveyId, email, choice }) => {
                Survey.updateOne(
                    {
                        _id: surveyId,
                        recipients: {
                            $elemMatch: { email: email, responded: false }
                    }
                    }, 
                    {
                        $inc: { [choice]: 1 },
                        $set: { 'recipients.$.responded': true },
                        lastResponded: new Date()
                    }
                ).exec();
            })
            //Returns Valuse
            .value();
            //Tells Sendgrid everything is ok
            res.send({}); 
    });

    //Not calling the function - simply telling express app object that we have a function it should checkout if a user is logged in
    app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
        //ES6 destructuring to pull out certain properties
        const { title, subject, body, recipients } = req.body;
        //lowercase since it is an instance
        const survey = new Survey({
            //Keys identical to properties so only have to list singularly
            title,
            subject,
            body,
            //Array of objects containing email addresses - since we return only one JS exression we don't need outer curly braces and return keyword
            recipients: recipients.split(',').map(email => ({ email: email.trim() })), 
            //Links current user to survey - id automatically generated by Mongo
            _user: req.user.id,
            dateSent: Date.now()
        });

        //Send the Email 
        const mailer = new Mailer(survey, surveyTemplate(survey));
        
        //Watch if anything goes wrong with these statements, catch requests and send error  
        try {
            await mailer.send();
            //saves survey to the database
            await survey.save();
            //Subracts credits after survey sent 
            req.user.credits -= 1;
            const user = await req.user.save();
            //send back updated user model
            res.send(user)
        } catch (err) {
            res.status(422).send(err)
        }   
    });
};

//This creates an instance of a survey in memory - it does not yet persist it yet to the database 